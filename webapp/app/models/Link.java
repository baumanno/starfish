package models;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import play.db.ebean.Model;

/**
 * Provides data modelling for links. Every link is defined by its source,
 * target and subnet. The PK is an autogenerated ID, all other fields are
 * unique, as no two links are exactly the same.
 */
@Entity
@Table(
        name = "LINK"
        )
public class Link extends Model {
    @Id
    private long id;

    @Column(
            columnDefinition = "varchar(15)",
            nullable = false)
    private String sourceInterface;

    public String getSourceInterface() {
        return sourceInterface;
    }

    @Column(
            columnDefinition = "varchar(15)",
            nullable = false)
    private String sourceIP;

    public String getSourceIP() {
        return sourceIP;
    }

    @Column(
            columnDefinition = "varchar(15)",
            nullable = false)
    private String targetInterface;

    public String getTargetInterface() {
        return targetInterface;
    }

    @Column(
            columnDefinition = "varchar(15)",
            nullable = false)
    private String targetIP;

    public String getTargetIP() {
        return targetIP;
    }

    @Column(
            columnDefinition = "varchar(15)",
            nullable = false)
    private String subnet;
    
    public String getSubnet() {
        return subnet;
    }
    
    @OneToOne
    private Metric metric;
    
    public Metric getMetric() {
        return metric;
    }
    
    @OneToOne
    private Feed feed;
    
    public Feed getFeed() {
        return feed;
    }

    public Link(String sourceIntPort, String sourceIPaddress,
            String targetIntPort, String targetIPaddress, String subnetAddress, String metricName, String feedName) {
        this.sourceInterface = sourceIntPort;
        this.sourceIP = sourceIPaddress;
        this.targetInterface = targetIntPort;
        this.targetIP = targetIPaddress;
        this.subnet = subnetAddress;
        this.metric = Metric.getFind().ref(metricName);
        this.feed = Feed.getFind().ref(feedName);
    }

    private static Finder<Integer, Link> find = new Finder<Integer, Link>(
            Integer.class, Link.class);

    public static Finder<Integer, Link> getFind() {
        return find;
    }
}
